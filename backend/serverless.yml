service: serverless-udagram-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

package:
  individually: false

custom:
  webpack:
    includeModules: true
    concurrency: 1

  documentation:
    api:
      info:
        version: v1.0.0
        title: todos API
        description: Serverless application for todos posting
    models:
      - name: "CreateRequest"
        contentType: "application/json"
        schema: ${file(models/create-todo-model.json)}
      - name: "UpdateRequest"
        contentType: "application/json"
        schema: ${file(models/update-todo-model.json)}

  
provider:
  name: aws
  runtime: nodejs14.x

  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'us-east-1'}

  logs:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    VIDEOS_TABLE: Videos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    VIDEOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-todo-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.VIDEOS_CREATED_AT_INDEX}

    - Effect: Allow
      Action:
        - dynamodb:putItem
        - dynamodb:updateItem
        - dynamodb:deleteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:putItem
        - dynamodb:updateItem
        - dynamodb:deleteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*

resources:
  Resources:  
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    OnlyBody:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'OnlyBody'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true # true or false
        ValidateRequestParameters: false # true or false
    
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # TODO: Create a DynamoDB table with local secondary index and a composite key
    VideosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.VIDEOS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: videoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: videoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.VIDEOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
          cors: true
  
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true
          reqValidatorName: OnlyBody
          documentation:
            summary: Create a new todo
            description: creating JSON group of name, and dueDate
            requestModels:
              "application/json": CreateRequest
          request:
            schema:
              application/json: ${file(models/create-todo-model.json)}

  CreateVideo:
    handler: src/lambda/http/createVideo.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: videos
          cors: true
          documentation:
            summary: Create a new todo
            description: creating JSON group of name, and createdAt
          request:
            schema:
              application/json: ${file(models/create-video-model.json)}
  
  GetVideos:
    handler: src/lambda/http/getVideos.handler
    events:
      - http:
          method: get
          path: videos
          authorizer: Auth
          cors: true

  GenerateUploadUrl:
    handler: src/lambda/http/generateVideoUploadUrl.handler
    events:
      - http:
          method: post
          path: videos/{videoId}/attachment
          authorizer: Auth
          cors: true

  DeleteVideo:
    handler: src/lambda/http/deleteVideo.handler
    events:
      - http:
          method: delete
          path: videos/{videoId}
          authorizer: Auth
          cors: true

  UpdateVideo:
    handler: src/lambda/http/updateVideo.handler
    events:
      - http:
          method: patch
          path: videos/{videoId}
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(models/update-video-model.json)}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          reqValidatorName: OnlyBody          
          documentation:
            summary: Update a todo
            description: updating JSON todo of name, dueDate and done
            requestModels:
              "application/json": UpdateRequest
          request:
            schema:
              application/json: ${file(models/create-todo-model.json)}


  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true

  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos/{todoId}/attachment
  #         authorizer: Auth
  #         cors: true
